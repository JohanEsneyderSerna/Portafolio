---
---

<div class="floating-buttons">
  <div class="theme-switch-wrapper">
    <label class="theme-switch" for="theme-toggle">
      <input type="checkbox" id="theme-toggle" />
      <div class="slider">
        <i class="fas fa-sun"></i>
        <i class="fas fa-moon"></i>
      </div>
    </label>
  </div>
  <button class="color-picker-btn" id="color-picker-btn" title="Cambiar color principal">
    <i class="fas fa-palette"></i>
  </button>
  <div class="color-picker-panel" id="color-picker-panel">
    <div class="color-option" data-color="#8B0000" style="background-color: #8B0000;"></div>
    <div class="color-option" data-color="#006400" style="background-color: #006400;"></div>
    <div class="color-option" data-color="#00008B" style="background-color: #00008B;"></div>
    <div class="color-option" data-color="#4B0082" style="background-color: #4B0082;"></div>
    <div class="color-option" data-color="#800080" style="background-color: #800080;"></div>
  </div>
</div>

<script>
  function toggleTheme() {
    const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    document.documentElement.classList.remove('light', 'dark');
    document.documentElement.classList.add(newTheme);
    localStorage.setItem('theme', newTheme);
  }

  function updateLanguageText() {
    const langText = document.querySelector('.lang-text');
    if (langText) {
      const currentLanguage = localStorage.getItem('language') || 'es';
      langText.textContent = currentLanguage.toUpperCase();
    }
  }

  function setCustomColors(primaryColor) {
    // Función para calcular un color más oscuro para primary-dark
    function darkenColor(color, percent) {
      const num = parseInt(color.replace('#', ''), 16);
      const amt = Math.round(2.55 * percent);
      const R = (num >> 16) - amt;
      const G = (num >> 8 & 0x00FF) - amt;
      const B = (num & 0x0000FF) - amt;
      return '#' + (
        0x1000000 + 
        (R < 0 ? 0 : R) * 0x10000 + 
        (G < 0 ? 0 : G) * 0x100 + 
        (B < 0 ? 0 : B)
      ).toString(16).slice(1);
    }

    // Crear estilos CSS personalizados
    const isDark = document.documentElement.classList.contains('dark');
    const root = document.documentElement;
    
    if (isDark) {
      // Versión del tema oscuro
      root.style.setProperty('--primary', primaryColor);
      root.style.setProperty('--border-color', primaryColor);
      root.style.setProperty('--accent', primaryColor);
      root.style.setProperty('--primary-dark', darkenColor(primaryColor, 20));
    } else {
      // Versión del tema claro
      root.style.setProperty('--primary', primaryColor);
      root.style.setProperty('--border-color', primaryColor);
      root.style.setProperty('--accent', primaryColor);
      root.style.setProperty('--primary-dark', darkenColor(primaryColor, 20));
    }
    
    // Guardar la preferencia en localStorage
    localStorage.setItem('primaryColor', primaryColor);
  }

  // Inicializar cosas después de que se carga el documento
  document.addEventListener('DOMContentLoaded', () => {
    const themeToggle = document.getElementById('theme-toggle');
    const colorPickerBtn = document.getElementById('color-picker-btn');
    const colorPickerPanel = document.getElementById('color-picker-panel');
    const colorOptions = document.querySelectorAll('.color-option');

    // Cargar el color guardado
    const savedColor = localStorage.getItem('primaryColor');
    if (savedColor) {
      setCustomColors(savedColor);
      // Marcar el color seleccionado actualmente
      colorOptions.forEach(option => {
        if ((option as HTMLElement).dataset.color === savedColor) {
          option.classList.add('selected');
        }
      });
    }

    // Actualizar el texto del idioma al cargar la página
    updateLanguageText();

    if (themeToggle && themeToggle instanceof HTMLInputElement) {
      // Establecer el estado inicial del checkbox basado en el tema actual
      themeToggle.checked = document.documentElement.classList.contains('dark');

      themeToggle.addEventListener('change', () => {
        toggleTheme();
        // Reaplica los colores personalizados después de cambiar el tema
        const savedColor = localStorage.getItem('primaryColor');
        if (savedColor) {
          setCustomColors(savedColor);
        }
      });
    }

    // Mostrar/ocultar el panel de colores
    if (colorPickerBtn) {
      colorPickerBtn.addEventListener('click', () => {
        colorPickerPanel.classList.toggle('show');
      });
    }

    // Manejar la selección de colores
    colorOptions.forEach(option => {
      option.addEventListener('click', () => {
        // Eliminar la selección anterior
        colorOptions.forEach(opt => opt.classList.remove('selected'));
        // Seleccionar el nuevo color
        option.classList.add('selected');
        // Aplicar el color
        const newColor = (option as HTMLElement).dataset.color;
        setCustomColors(newColor);
        // Ocultar el panel después de seleccionar
        colorPickerPanel.classList.remove('show');
      });
    });

    // Cerrar el panel de colores al hacer clic fuera
    document.addEventListener('click', (event) => {
      if (!colorPickerBtn.contains(event.target as Node) && 
          !colorPickerPanel.contains(event.target as Node)) {
        colorPickerPanel.classList.remove('show');
      }
    });
  });
</script>

<style>
  .floating-buttons {
    position: fixed;
    right: 20px;
    top: 50%;
    transform: translateY(-50%);
    display: flex;
    flex-direction: column;
    gap: 1rem;
    z-index: 100;
  }

  .theme-switch-wrapper {
    display: flex;
    align-items: center;
  }

  .theme-switch {
    display: inline-block;
    position: relative;
    width: 40px;
    height: 60px;
  }

  .theme-switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--card-bg);
    border: 1px solid var(--border);
    border-radius: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    padding: 6px 0;
    box-shadow: 0 2px 5px var(--shadow);
    transition: all 0.3s ease;
  }

  .slider:before {
    position: absolute;
    content: "";
    height: 16px;
    width: 16px;
    left: 11px;
    top: 6px;
    background-color: var(--primary);
    transition: .3s;
    border-radius: 50%;
    z-index: 2;
  }

  input:checked + .slider:before {
    transform: translateY(32px);
  }

  .slider i {
    font-size: 0.8rem;
    color: var(--text);
    z-index: 1;
  }

  /* Estilos para el selector de colores */
  .color-picker-btn {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: 1px solid var(--border);
    background: var(--card-bg);
    color: var(--text);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 5px var(--shadow);
    transition: all 0.3s ease;
    font-size: 1.2rem;
  }

  .color-picker-btn:hover {
    transform: scale(1.1);
    border-color: var(--primary);
  }

  .color-picker-panel {
    position: absolute;
    right: 50px;
    top: 5px;
    background: var(--card-bg);
    border: 1px solid var(--border);
    border-radius: 8px;
    padding: 10px;
    display: flex;
    flex-direction: column;
    gap: 8px;
    box-shadow: 0 3px 8px var(--shadow);
    opacity: 0;
    pointer-events: none;
    transform: translateX(10px);
    transition: all 0.3s ease;
  }

  .color-picker-panel.show {
    opacity: 1;
    pointer-events: auto;
    transform: translateX(0);
  }

  .color-option {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    cursor: pointer;
    transition: transform 0.2s;
    border: 2px solid transparent;
  }

  .color-option:hover {
    transform: scale(1.15);
  }

  .color-option.selected {
    border-color: white;
    box-shadow: 0 0 0 2px var(--border);
  }

  @media (max-width: 768px) {
    .floating-buttons {
      right: 1rem;
      top: auto;
      bottom: calc(5.5rem + 80px);
      transform: none;
      flex-direction: column;
      gap: 0.75rem;
    }

    .theme-switch {
      width: 36px;
      height: 60px;
    }

    .slider {
      flex-direction: column;
      padding: 6px 0;
    }

    .slider:before {
      left: 9px;
      top: 6px;
      width: 16px;
      height: 16px;
    }

    input:checked + .slider:before {
      transform: translateY(32px);
    }

    .color-picker-btn {
      width: 36px;
      height: 36px;
      font-size: 1rem;
    }

    .color-picker-panel {
      right: calc(100% + 10px);
      left: auto;
      top: 0;
      bottom: auto;
      flex-direction: row;
      gap: 8px;
    }

    .color-option {
      width: 25px;
      height: 25px;
    }
  }

  .hidden {
    display: none !important;
  }
</style> 