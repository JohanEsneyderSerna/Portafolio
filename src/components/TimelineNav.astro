---
interface Props {
  sections: {
    id: string;
    title: string;
    icon: string;
  }[];
}

const { sections } = Astro.props;
---

<nav class="timeline-nav">
  <div class="timeline-line"></div>
  <ul>
    {
      sections.map(({ id, title, icon }) => (
        <li>
          <a href={`#${id}`} class="timeline-item">
            <span class="timeline-dot">
              <i class={icon}></i>
            </span>
            <span class="timeline-text">{title}</span>
          </a>
        </li>
      ))
    }
  </ul>
</nav>

<style>
  .timeline-nav {
    position: fixed;
    left: 2rem;
    top: 50%;
    transform: translateY(-50%);
    z-index: 100;
  }

  .timeline-line {
    position: absolute;
    left: 12px;
    top: 0;
    bottom: 0;
    width: 2px;
    background: var(--gray-200);
  }

  .timeline-nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
    position: relative;
  }

  .timeline-item {
    display: flex;
    align-items: center;
    padding: 0.75rem 0;
    text-decoration: none;
    color: var(--text-secondary);
    transition: all 0.3s ease;
  }

  .timeline-dot {
    width: 26px;
    height: 26px;
    background: var(--card-bg);
    border: 2px solid var(--gray-200);
    border-radius: 50%;
    margin-right: 1rem;
    transition: all 0.3s ease;
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .timeline-dot i {
    font-size: 0.8rem;
    color: var(--text-secondary);
    transition: all 0.3s ease;
  }

  .timeline-text {
    opacity: 1;
    font-size: 0.9rem;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .timeline-item:hover {
    color: var(--text);
  }

  .timeline-item:hover .timeline-dot,
  .timeline-item:focus .timeline-dot {
    background: var(--accent);
    border-color: var(--accent);
  }

  .timeline-item:hover .timeline-dot i,
  .timeline-item:focus .timeline-dot i {
    color: white;
  }

  .timeline-dot.active {
    background: var(--accent);
    border-color: var(--accent);
  }

  .timeline-dot.active i {
    color: white;
  }

  @media (max-width: 768px) {
    .timeline-nav {
      position: fixed;
      left: 0;
      top: auto;
      bottom: 0;
      transform: none;
      width: 100%;
      background: var(--card-bg);
      border-top: 1px solid var(--border);
      padding: 0.5rem;
      box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
    }

    .timeline-line {
      display: none;
    }

    .timeline-nav ul {
      display: flex;
      justify-content: space-around;
      align-items: center;
      gap: 0.5rem;
      padding: 0 1rem;
    }

    .timeline-item {
      flex-direction: column;
      align-items: center;
      padding: 0.5rem;
      gap: 0.25rem;
    }

    .timeline-dot {
      width: 32px;
      height: 32px;
      margin-right: 0;
      margin-bottom: 0.25rem;
    }

    .timeline-dot i {
      font-size: 1rem;
    }

    .timeline-text {
      font-size: 0.75rem;
      max-width: 80px;
      text-align: center;
      overflow: hidden;
      text-overflow: ellipsis;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      white-space: normal;
      line-height: 1.2;
      height: 1.8rem;
    }
  }

  @media (max-width: 480px) {
    .timeline-nav ul {
      padding: 0 0.5rem;
    }

    .timeline-dot {
      width: 28px;
      height: 28px;
    }

    .timeline-dot i {
      font-size: 0.9rem;
    }

    .timeline-text {
      font-size: 0.7rem;
      max-width: 60px;
    }
  }
</style>

<script>
  // Highlight active section based on scroll position
  const observerOptions = {
    root: null,
    rootMargin: '0px',
    threshold: 0.5,
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      const id = entry.target.getAttribute('id');
      const timelineItem = document.querySelector(`a[href="#${id}"] .timeline-dot`);
      
      if (entry.isIntersecting) {
        timelineItem?.classList.add('active');
      } else {
        timelineItem?.classList.remove('active');
      }
    });
  }, observerOptions);

  // Observe all sections
  document.querySelectorAll('section[id]').forEach((section) => {
    observer.observe(section);
  });
</script> 